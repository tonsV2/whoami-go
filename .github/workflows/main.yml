name: Docker image creation

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - release
      - feature/**

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # This should match what's in the docker-compose production service
  IMAGE_NAME: tons/whoami-go

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          touch .env
          docker-compose build test
          docker-compose run test

      - name: Find version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # Export
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          echo "VERSION=$VERSION"

      - name: Build image
        run: |
          docker-compose build prod

      - name: Smoke test Docker image
        run: |
          docker-compose up -d prod
          sleep 5
          curl --fail localhost:8080/health
          docker-compose down

      - name: Log into registry
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      # TODO: If on release branch and no tag is present an image tagged with release will be push... Which won't be used for anything
      # Perhaps only push if $VERSION != 'release' ?
      - name: Push image
        run: |
          VERSION="${{ env.VERSION }}"
          docker tag $IMAGE_NAME $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION

      - name: Setup yq
        run: |
          sudo snap install --channel=v4 yq

      - name: Update chart image tag
        run: |
          yq -i e ".image.tag = \"${{ env.VERSION }}\"" helm/values.yaml

      - name: Update chart version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          yq -i e ".version = \"${{ env.VERSION }}\"" helm/Chart.yaml

      - name: Update chart app version
        run: |
          yq -i e ".appVersion = \"${{ env.VERSION }}\"" helm/Chart.yaml

      - name: Lint Helm
        uses: WyriHaximus/github-action-helm3@v2
        with:
          exec: helm lint helm/
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Test chart
        run: |
          echo "TODO"

      - name: Push chart
        run: |
          echo "TODO"

      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v0.7.0

      - name: Configure kubectl
        run: |
          mkdir /home/runner/.kube
          echo "${{ secrets.KUBECONFIG }}" > /home/runner/.kube/config

      - name: Deploy to Development
        if: github.ref == 'refs/heads/master'
        run: |
          FEATURE_TAG="-" helmfile -e dev sync --set image.pullPolicy=Always

      - name: Smoke test Development deployment
        if: github.ref == 'refs/heads/master'
        run: |
          URL=$(FEATURE_TAG="-" helmfile -e dev template | yq e '.spec.rules[0].host' - | sed s/null// | sed s/---// | tr -d '\n')
          sleep 10
          curl --fail --insecure --location "$URL/health" | jq -e '.Status | test("UP")'

      - name: Deploy to Production
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          FEATURE_TAG="-" helmfile -e prod sync

      - name: Smoke test Production deployment
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          URL=$(FEATURE_TAG="-" helmfile -e prod template | yq e '.spec.rules[0].host' - | sed s/null// | sed s/---// | tr -d '\n')
          sleep 10
          curl --fail --insecure --location "$URL/health" | jq -e '.Status | test("UP")'

      - name: Deploy Feature Branch
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: |
          FEATURE_TAG="${{ env.VERSION }}" helmfile -e feature sync --set image.pullPolicy=Always

      - name: Smoke test Feature deployment
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: |
          URL=$(FEATURE_TAG="${{ env.VERSION }}" helmfile -e feature template | yq e '.spec.rules[0].host' - | sed s/null// | sed s/---// | tr -d '\n')
          sleep 10
          curl --fail --insecure --location "$URL/health" | jq -e '.Status | test("UP")'
